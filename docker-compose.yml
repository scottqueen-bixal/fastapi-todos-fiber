services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  adminer:
    build:
      context: ./adminer
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - internal

  backend:
    build:
      context: .
    ports:
      - 8000:8000
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`todo.com`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    stop_grace_period: 1s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    ports:
      - 5173:5173
    depends_on:
      - backend
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`todo.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - 80:80
      - 443:443
    restart: always
    depends_on:
      - db
      - backend
      - frontend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - internal

  mcp-crawl4ai-rag:
    image: mcp/crawl4ai-rag
    build:
      context: ./docs/mcp-crawl4ai-rag
      dockerfile: Dockerfile
    ports:
      - 8051:8051
    expose:
      - 8051
    env_file:
      - .env.mcp

networks:
  internal:
    driver: bridge

volumes:
  pgdata:
  node_modules:
